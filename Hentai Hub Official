local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Hentai Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "HHConfig"})
--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]

local Tab = Window:MakeTab({
	Name = "Player",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Movement"
})

Tab:AddButton({
	Name = "TweenTool",
	Callback = function()
-- Reference to TweenService
local TweenService = game:GetService("TweenService")

-- Function to calculate the duration based on distance
local function calculateDuration(distance)
    -- Calculate the duration based on distance, adding 0.75 seconds for every 100 studs
    local baseDuration = 1
    local additionalDuration = distance / 133.33
    return baseDuration + additionalDuration
end

-- Function to tween the player to a specific position over a duration
local function tweenToPosition(position, duration)
    -- Check if the position is valid
    if position then
        -- Get the player's character
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            -- Create a new tween
            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
            -- Play the tween
            tween:Play()
        end
    else
        warn("Invalid position")
    end
end

-- Function to handle player input and tweening
local function handleTweening()
    -- Create a tool
    local tool = Instance.new("Tool")
    tool.RequiresHandle = false
    tool.Name = "TweenTool"
    
    -- Activate function for the tool
    tool.Activated:Connect(function()
        -- Get the player's mouse
        local mouse = game.Players.LocalPlayer:GetMouse()
        
        -- Check if the mouse is pointing at something
        if mouse then
            -- Get the position the mouse is pointing at
            local targetPosition = mouse.Hit.p + Vector3.new(0, 2.5, 0) -- Adjusted position
            
            -- Calculate distance between player and target position
            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            local distance = (playerPosition - targetPosition).magnitude
            
            -- Calculate the duration based on distance
            local duration = calculateDuration(distance)
            
            -- Tween the player to the target position over calculated duration
            tweenToPosition(targetPosition, duration)
        end
    end)
    
    -- Give the tool to the player
    tool.Parent = game.Players.LocalPlayer.Backpack
end

-- Call the function to handle tweening
handleTweening()
  	end    
})

Tab:AddButton({
	Name = "TpTool",
	Callback = function()
        mouse = game.Players.LocalPlayer:GetMouse()
        tool = Instance.new("Tool")
        tool.RequiresHandle = false
        tool.Name = "TpTool"
        tool.Activated:connect(function()
        local pos = mouse.Hit+Vector3.new(0,2.5,0)
        pos = CFrame.new(pos.X,pos.Y,pos.Z)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
    end)
        tool.Parent = game.Players.LocalPlayer.Backpack
  	end    
})


Tab:AddSlider({
	Name = "WalkSpeed",
	Min = 16,
	Max = 1600,
	Default = 16,
	Color = Color3.fromRGB(72,0,144),
	Increment = 1,
	ValueName = "WalkSpeed",
	Callback = function(ws)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = ws
	end    
})

Tab:AddSlider({
	Name = "Jump Power",
	Min = 50,
	Max = 50000,
	Default = 50,
	Color = Color3.fromRGB(72,0,144),
	Increment = 1,
	ValueName = "JumpPower",
	Callback = function(jp)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = jp
	end    
})

Tab:AddButton({
	Name = "Tp Player",
	Callback = function()
-- Function to teleport the player to a given position and make them look at a target position
local function teleportAndLookAt(position)
    local character = game.Players.LocalPlayer.Character
    if character then
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local targetPosition = Vector3.new(position.X, humanoidRootPart.Position.Y, position.Z) -- Make sure to look at the same Y-level
        local direction = (targetPosition - humanoidRootPart.Position).unit
        humanoidRootPart.CFrame = CFrame.new(targetPosition) * CFrame.Angles(0, math.atan2(direction.X, direction.Z), 0)
    end
end

-- Function to check if a player is safe
local function isPlayerSafe(player)
    local safeValue = workspace:FindFirstChild(player.Name.."Safe")
    return safeValue and safeValue.Value == true
end

-- Function to find a random player to teleport to
local function findRandomPlayerToTeleport()
    local players = game.Players:GetPlayers()
    local eligiblePlayers = {}
    for _, player in ipairs(players) do
        if player ~= game.Players.LocalPlayer and not isPlayerSafe(player) then
            table.insert(eligiblePlayers, player)
        end
    end
    if #eligiblePlayers > 0 then
        return eligiblePlayers[math.random(1, #eligiblePlayers)]
    else
        return nil
    end
end

-- Function to run the teleportation and look at script
local function teleportAndLookAtRandomPlayer()
    local playerToTeleport = findRandomPlayerToTeleport()
    if playerToTeleport then
        teleportAndLookAt(playerToTeleport.Character.HumanoidRootPart.Position)
    else
        warn("No eligible player found to teleport to.")
    end
end

-- Run the teleportation and look at script
teleportAndLookAtRandomPlayer()
  	end    
})
