local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Hentai Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "HHConfig"})
--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]

local PlayerTab = Window:MakeTab({
	Name = "Player",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = PlayerTab:AddSection({
	Name = "Movement"
})

PlayerTab:AddButton({
	Name = "TweenTool",
	Callback = function()
-- Reference to TweenService
local TweenService = game:GetService("TweenService")

-- Function to calculate the duration based on distance
local function calculateDuration(distance)
    -- Calculate the duration based on distance, adding 0.75 seconds for every 100 studs
    local baseDuration = 1
    local additionalDuration = distance / 133.33
    return baseDuration + additionalDuration
end

-- Function to tween the player to a specific position over a duration
local function tweenToPosition(position, duration)
    -- Check if the position is valid
    if position then
        -- Get the player's character
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            -- Create a new tween
            local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
            local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
            -- Play the tween
            tween:Play()
        end
    else
        warn("Invalid position")
    end
end

-- Function to handle player input and tweening
local function handleTweening()
    -- Create a tool
    local tool = Instance.new("Tool")
    tool.RequiresHandle = false
    tool.Name = "TweenTool"
    
    -- Activate function for the tool
    tool.Activated:Connect(function()
        -- Get the player's mouse
        local mouse = game.Players.LocalPlayer:GetMouse()
        
        -- Check if the mouse is pointing at something
        if mouse then
            -- Get the position the mouse is pointing at
            local targetPosition = mouse.Hit.p + Vector3.new(0, 2.5, 0) -- Adjusted position
            
            -- Calculate distance between player and target position
            local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            local distance = (playerPosition - targetPosition).magnitude
            
            -- Calculate the duration based on distance
            local duration = calculateDuration(distance)
            
            -- Tween the player to the target position over calculated duration
            tweenToPosition(targetPosition, duration)
        end
    end)
    
    -- Give the tool to the player
    tool.Parent = game.Players.LocalPlayer.Backpack
end

-- Call the function to handle tweening
handleTweening()
  	end    
})

PlayerTab:AddButton({
	Name = "TpTool",
	Callback = function()
        mouse = game.Players.LocalPlayer:GetMouse()
        tool = Instance.new("Tool")
        tool.RequiresHandle = false
        tool.Name = "TpTool"
        tool.Activated:connect(function()
        local pos = mouse.Hit+Vector3.new(0,2.5,0)
        pos = CFrame.new(pos.X,pos.Y,pos.Z)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = pos
    end)
        tool.Parent = game.Players.LocalPlayer.Backpack
  	end    
})


PlayerTab:AddSlider({
	Name = "WalkSpeed",
	Min = 16,
	Max = 1600,
	Default = 16,
	Color = Color3.fromRGB(72,0,144),
	Increment = 1,
	ValueName = "WalkSpeed",
	Callback = function(ws)
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = ws
	end    
})

PlayerTab:AddSlider({
	Name = "Jump Power",
	Min = 50,
	Max = 50000,
	Default = 50,
	Color = Color3.fromRGB(72,0,144),
	Increment = 1,
	ValueName = "JumpPower",
	Callback = function(jp)
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = jp
	end    
})

-- Crucifix PlayGround

local CPTab = Window:MakeTab({
	Name = "Crucifix PlayGround",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = CPTab:AddSection({
	Name = "Player"
})

CPTab:AddToggle({
	Name = "Auto Coin",
	Default = false,
	Callback = function(Value)
-- Get the LocalPlayer
local player = game.Players.LocalPlayer

-- Function to adjust the hitbox size and disable collision
local function adjustHitbox(character)
    -- Find the HumanoidRootPart of the character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    -- Adjust the size of the HumanoidRootPart if found
    if humanoidRootPart then
        -- Define the desired size (adjust as needed)
        local newSize = Vector3.new(4000, 2, 4000)

        -- Ensure the size is within reasonable bounds to avoid crashes
        if newSize.X >= 2 and newSize.Y >= 2 and newSize.Z >= 2 then
            humanoidRootPart.Size = newSize
        else
            warn("Hitbox size is too small, skipping adjustment.")
        end

        -- Disable collision for the hitbox
        humanoidRootPart.CanCollide = false
    else
        warn("HumanoidRootPart not found.")
    end
end

-- Adjust the hitbox size and disable collision when the character is added
local function onCharacterAdded(character)
    adjustHitbox(character)
end

-- Check if the character already exists
if player.Character then
    adjustHitbox(player.Character)
end

-- Connect the function to adjust hitbox size and disable collision when the character is added
player.CharacterAdded:Connect(onCharacterAdded)
	end    
})

CPTab:AddDropdown({
	Name = "Dropdown",
	Default = "1",
	Options = {"Select Player", table.unpack(game.Players:GetPlayers())},
	Callback = function(Value)
		print(Value)
	end    
})

CPTab:AddButton({
	Name = "DEATH TO MASMAS_NAT8",
	Callback = function()
-- Get the LocalPlayer and find the player named "Masmas_nat8"
local player = game.Players.LocalPlayer
local targetPlayer = game.Players:FindFirstChild("Masmas_nat8")

-- Check if the target player exists
if targetPlayer then
    -- Teleport the LocalPlayer to the target player's character
    local targetCharacter = targetPlayer.Character
    if targetCharacter then
        player.Character:MoveTo(targetCharacter.PrimaryPart.Position)
    else
        warn("Target player's character not found.")
    end
else
    warn("Target player not found.")
end
  	end    
})

OrionLib:Init()
